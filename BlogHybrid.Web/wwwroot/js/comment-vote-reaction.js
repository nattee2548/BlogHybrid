/* ================================================
   Comment Vote & Reaction System
   ================================================ */

// ========================================
// Vote Comment (Upvote/Downvote)
// ========================================
async function voteComment(commentId, voteType) {
    try {
        const response = await fetch(`/api/comment/${commentId}/vote`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({ voteType: voteType })
        });

        const result = await response.json();

        if (result.success) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateVoteUI(commentId, result.data);
            
            // ‡πÅ‡∏™‡∏î‡∏á toast notification
            showToast(result.message, 'success');
        } else {
            showToast(result.message, 'error');
        }
    } catch (error) {
        console.error('Error voting comment:', error);
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 401 Unauthorized ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (error.status === 401) {
            // ‡πÄ‡∏õ‡∏¥‡∏î login modal ‡∏´‡∏£‡∏∑‡∏≠ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
            showLoginPrompt();
        } else {
            showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
        }
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Vote UI
 */
function updateVoteUI(commentId, data) {
    const commentElement = document.getElementById(`comment-${commentId}`);
    if (!commentElement) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Upvote
    const upvoteBtn = commentElement.querySelector('.vote-btn.upvote');
    if (upvoteBtn) {
        if (data.currentUserVote === 'Upvote') {
            upvoteBtn.classList.add('active');
        } else {
            upvoteBtn.classList.remove('active');
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Downvote
    const downvoteBtn = commentElement.querySelector('.vote-btn.downvote');
    if (downvoteBtn) {
        if (data.currentUserVote === 'Downvote') {
            downvoteBtn.classList.add('active');
        } else {
            downvoteBtn.classList.remove('active');
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Vote Score
    const voteScoreElement = commentElement.querySelector('.vote-score');
    if (voteScoreElement) {
        voteScoreElement.textContent = data.voteScore;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation
        voteScoreElement.classList.add('vote-updated');
        setTimeout(() => voteScoreElement.classList.remove('vote-updated'), 300);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Upvote/Downvote counts (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const upvoteCount = commentElement.querySelector('.upvote-count');
    if (upvoteCount) {
        upvoteCount.textContent = data.upvoteCount;
    }

    const downvoteCount = commentElement.querySelector('.downvote-count');
    if (downvoteCount) {
        downvoteCount.textContent = data.downvoteCount;
    }
}

// ========================================
// React to Comment (Like/Love/Haha/Wow/Sad/Angry)
// ========================================
async function reactToComment(commentId, reactionType) {
    try {
        const response = await fetch(`/api/comment/${commentId}/react`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({ reactionType: reactionType })
        });

        const result = await response.json();

        if (result.success) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateReactionUI(commentId, result.data);
            
            // ‡πÅ‡∏™‡∏î‡∏á toast notification
            showToast(result.message, 'success');
            
            // ‡∏õ‡∏¥‡∏î reaction picker
            hideReactionPicker(commentId);
        } else {
            showToast(result.message, 'error');
        }
    } catch (error) {
        console.error('Error reacting to comment:', error);
        
        if (error.status === 401) {
            showLoginPrompt();
        } else {
            showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
        }
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Reaction UI
 */
function updateReactionUI(commentId, data) {
    const commentElement = document.getElementById(`comment-${commentId}`);
    if (!commentElement) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Reaction ‡∏´‡∏•‡∏±‡∏Å
    const reactionBtn = commentElement.querySelector('.reaction-btn');
    if (reactionBtn) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï icon ‡∏ï‡∏≤‡∏° current user reaction
        const icon = reactionBtn.querySelector('i');
        if (data.currentUserReaction) {
            // ‡πÅ‡∏™‡∏î‡∏á reaction ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            icon.className = getReactionIcon(data.currentUserReaction);
            reactionBtn.classList.add('active');
        } else {
            // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô default icon
            icon.className = 'bi bi-emoji-smile';
            reactionBtn.classList.remove('active');
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Reaction counts
    const reactionsElement = commentElement.querySelector('.reaction-counts');
    if (reactionsElement && data.reactions) {
        updateReactionCounts(reactionsElement, data.reactions, data.totalReactionCount);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total reaction count (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const totalCount = commentElement.querySelector('.total-reaction-count');
    if (totalCount) {
        totalCount.textContent = data.totalReactionCount;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation
        totalCount.classList.add('count-updated');
        setTimeout(() => totalCount.classList.remove('count-updated'), 300);
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Reaction Counts Display
 */
function updateReactionCounts(element, reactions, total) {
    if (total === 0) {
        element.innerHTML = '';
        element.style.display = 'none';
        return;
    }

    element.style.display = 'flex';
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á reactions
    let html = '';
    const reactionEmojis = {
        'Like': 'üëç',
        'Love': '‚ù§Ô∏è',
        'Haha': 'üòÇ',
        'Wow': 'üòÆ',
        'Sad': 'üò¢',
        'Angry': 'üò°'
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ reactions ‡∏ó‡∏µ‡πà‡∏°‡∏µ count > 0
    const sortedReactions = Object.entries(reactions)
        .filter(([key, value]) => value > 0 && key !== 'totalCount')
        .sort((a, b) => b[1] - a[1]) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
        .slice(0, 3); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å

    sortedReactions.forEach(([key, count]) => {
        const reactionName = key.replace('Count', ''); // ‡πÄ‡∏ä‡πà‡∏ô "LikeCount" -> "Like"
        const emoji = reactionEmojis[reactionName];
        if (emoji) {
            html += `<span class="reaction-item">${emoji} ${count}</span>`;
        }
    });

    element.innerHTML = html;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Reaction Picker
 */
function showReactionPicker(commentId) {
    const picker = document.getElementById(`reaction-picker-${commentId}`);
    if (picker) {
        // ‡∏õ‡∏¥‡∏î pickers ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
        document.querySelectorAll('.reaction-picker').forEach(p => {
            if (p.id !== `reaction-picker-${commentId}`) {
                p.classList.remove('show');
            }
        });

        picker.classList.toggle('show');
    }
}

/**
 * ‡∏ã‡πà‡∏≠‡∏ô Reaction Picker
 */
function hideReactionPicker(commentId) {
    const picker = document.getElementById(`reaction-picker-${commentId}`);
    if (picker) {
        picker.classList.remove('show');
    }
}

/**
 * ‡∏õ‡∏¥‡∏î Reaction Pickers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
 */
document.addEventListener('click', (e) => {
    if (!e.target.closest('.reaction-btn') && !e.target.closest('.reaction-picker')) {
        document.querySelectorAll('.reaction-picker.show').forEach(picker => {
            picker.classList.remove('show');
        });
    }
});

/**
 * Helper: ‡πÅ‡∏õ‡∏•‡∏á Reaction Type ‡πÄ‡∏õ‡πá‡∏ô Icon Class
 */
function getReactionIcon(reactionType) {
    const icons = {
        'Like': 'bi bi-hand-thumbs-up-fill',
        'Love': 'bi bi-heart-fill',
        'Haha': 'bi bi-emoji-laughing-fill',
        'Wow': 'bi bi-emoji-surprised-fill',
        'Sad': 'bi bi-emoji-frown-fill',
        'Angry': 'bi bi-emoji-angry-fill'
    };
    return icons[reactionType] || 'bi bi-emoji-smile';
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Login Prompt
 */
function showLoginPrompt() {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ login modal ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î
    const loginModal = document.getElementById('loginModal');
    if (loginModal) {
        const modal = new bootstrap.Modal(loginModal);
        modal.show();
    } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ modal ‡πÉ‡∏´‡πâ redirect
        const returnUrl = encodeURIComponent(window.location.pathname);
        window.location.href = `/Account/Login?returnUrl=${returnUrl}`;
    }
}

/**
 * Toast Notification (‡πÉ‡∏ä‡πâ function ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å post-detail.js)
 */
function showToast(message, type = 'info') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ showToast function ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (typeof window.showToast === 'function') {
        window.showToast(message, type);
        return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const toast = document.createElement('div');
    toast.className = `toast-notification toast-${type} show`;

    const icon = type === 'success' ? 'bi-check-circle-fill' :
        type === 'error' ? 'bi-exclamation-triangle-fill' :
            'bi-info-circle-fill';

    toast.innerHTML = `
        <i class="bi ${icon}"></i>
        <span>${message}</span>
    `;

    document.body.appendChild(toast);

    // Auto hide after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}
