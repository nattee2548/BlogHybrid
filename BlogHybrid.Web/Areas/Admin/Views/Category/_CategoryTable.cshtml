@model BlogHybrid.Web.Models.ViewModels.Admin.CategoryIndexViewModel

<div class="table-responsive">
    <table class="table table-hover admin-table" id="categoryTable">
        <thead>
            <tr>
                <th width="50">
                    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                </th>
                <th width="60">
                    <a href="@Url.Action("Index", new { 
                        page = Model.CurrentPage,
                        pageSize = Model.PageSize,
                        search = Model.SearchTerm,
                        isActive = Model.IsActiveFilter,
                        sortBy = "SortOrder",
                        sortDirection = Model.SortBy == "SortOrder" ? Model.NextSortDirection : "asc"
                    })" class="text-decoration-none admin-text-primary">
                        ลำดับ
                        @if (Model.SortBy == "SortOrder")
                        {
                            <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") ms-1"></i>
                        }
                    </a>
                </th>
                <th>
                    <a href="@Url.Action("Index", new { 
                        page = Model.CurrentPage,
                        pageSize = Model.PageSize,
                        search = Model.SearchTerm,
                        isActive = Model.IsActiveFilter,
                        sortBy = "Name",
                        sortDirection = Model.SortBy == "Name" ? Model.NextSortDirection : "asc"
                    })" class="text-decoration-none admin-text-primary">
                        ชื่อหมวดหมู่
                        @if (Model.SortBy == "Name")
                        {
                            <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") ms-1"></i>
                        }
                    </a>
                </th>
                <th>คำอธิบาย</th>
                <th width="120">สี</th>
                <th width="100">บทความ</th>
                <th width="100">
                    <a href="@Url.Action("Index", new { 
                        page = Model.CurrentPage,
                        pageSize = Model.PageSize,
                        search = Model.SearchTerm,
                        isActive = Model.IsActiveFilter,
                        sortBy = "IsActive",
                        sortDirection = Model.SortBy == "IsActive" ? Model.NextSortDirection : "desc"
                    })" class="text-decoration-none admin-text-primary">
                        สถานะ
                        @if (Model.SortBy == "IsActive")
                        {
                            <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") ms-1"></i>
                        }
                    </a>
                </th>
                <th width="120">
                    <a href="@Url.Action("Index", new { 
                        page = Model.CurrentPage,
                        pageSize = Model.PageSize,
                        search = Model.SearchTerm,
                        isActive = Model.IsActiveFilter,
                        sortBy = "CreatedAt",
                        sortDirection = Model.SortBy == "CreatedAt" ? Model.NextSortDirection : "desc"
                    })" class="text-decoration-none admin-text-primary">
                        วันที่สร้าง
                        @if (Model.SortBy == "CreatedAt")
                        {
                            <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") ms-1"></i>
                        }
                    </a>
                </th>
                <th width="150">การจัดการ</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Categories.Categories.Any())
            {
                @foreach (var category in Model.Categories.Categories)
                {
                    <tr data-category-id="@category.Id" class="category-row">
                        <td>
                            <input type="checkbox" name="selectedCategories" value="@category.Id">
                        </td>
                        <td>
                            <span class="badge bg-primary">#@category.SortOrder</span>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="category-color-indicator me-2" 
                                     style="background-color: @category.Color; width: 20px; height: 20px; border-radius: 4px;">
                                </div>
                                <div>
                                    <div class="fw-medium admin-text-primary">@category.Name</div>
                                    <small class="admin-text-muted">@category.Slug</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <span class="admin-text-secondary">
                                @if (string.IsNullOrEmpty(category.Description))
                                {
                                    <em class="text-muted">-</em>
                                }
                                else
                                {
                                    @(category.Description.Length > 100 ? 
                                      category.Description.Substring(0, 100) + "..." : 
                                      category.Description)
                                }
                            </span>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="color-preview me-2" 
                                     style="background-color: @category.Color; width: 30px; height: 20px; border-radius: 4px; border: 1px solid var(--admin-border);">
                                </div>
                                <small class="admin-text-muted">@category.Color</small>
                            </div>
                        </td>
                        <td>
                            @if (category.PostCount > 0)
                            {
                                <a href="#" class="badge bg-info text-decoration-none" 
                                   onclick="showCategoryPosts(@category.Id, '@Html.Raw(category.Name)')">
                                    @category.PostCount รายการ
                                </a>
                            }
                            else
                            {
                                <span class="badge bg-light admin-text-muted">0 รายการ</span>
                            }
                        </td>
                        <td>
                            <span id="status-@category.Id" class="badge @(category.IsActive ? "bg-success" : "bg-secondary")">
                                @(category.IsActive ? "เปิดใช้งาน" : "ปิดใช้งาน")
                            </span>
                        </td>
                        <td>
                            <small class="admin-text-muted" title="@category.CreatedAt.ToString("dd/MM/yyyy HH:mm")">
                                @category.CreatedAt.ToString("dd/MM/yyyy")
                            </small>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button type="button" 
                                        id="toggle-@category.Id"
                                        class="btn @(category.IsActive ? "btn-outline-secondary" : "btn-outline-success")" 
                                        onclick="toggleCategoryStatus(@category.Id, @category.IsActive.ToString().ToLower())"
                                        title="@(category.IsActive ? "ปิดใช้งาน" : "เปิดใช้งาน")">
                                    <i class="fas fa-@(category.IsActive ? "eye-slash" : "eye")"></i>
                                </button>
                                
                                <a href="@Url.Action("Edit", new { id = category.Id })" 
                                   class="btn btn-outline-primary" 
                                   title="แก้ไข">
                                    <i class="fas fa-edit"></i>
                                </a>
                                
                                <button type="button" 
                                        class="btn btn-outline-danger @(category.PostCount > 0 ? "disabled" : "")" 
                                        onclick="confirmDelete(@category.Id, '@Html.Raw(category.Name)', @category.PostCount)"
                                        title="@(category.PostCount > 0 ? "ไม่สามารถลบได้ เนื่องจากมีบทความ" : "ลบ")"
                                        @(category.PostCount > 0 ? "disabled" : "")>
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="9" class="text-center py-5">
                        <div class="admin-text-muted">
                            <i class="fas fa-folder-open fa-3x mb-3 d-block text-muted"></i>
                            <h5 class="mb-3">ไม่พบหมวดหมู่</h5>
                            @if (!string.IsNullOrEmpty(Model.SearchTerm))
                            {
                                <p class="mb-3">
                                    ไม่พบหมวดหมู่ที่ตรงกับคำค้นหา "<strong>@Model.SearchTerm</strong>"
                                </p>
                                <div>
                                    <a href="@Url.Action("Index")" class="btn btn-outline-primary btn-sm me-2">
                                        <i class="fas fa-list me-1"></i>ดูทั้งหมด
                                    </a>
                                    <a href="@Url.Action("Create")" class="btn btn-primary btn-sm">
                                        <i class="fas fa-plus me-1"></i>เพิ่มหมวดหมู่ใหม่
                                    </a>
                                </div>
                            }
                            else if (Model.IsActiveFilter.HasValue)
                            {
                                <p class="mb-3">
                                    ไม่พบหมวดหมู่ที่@(Model.IsActiveFilter.Value ? "เปิดใช้งาน" : "ปิดใช้งาน")
                                </p>
                                <div>
                                    <a href="@Url.Action("Index")" class="btn btn-outline-primary btn-sm me-2">
                                        <i class="fas fa-list me-1"></i>ดูทั้งหมด
                                    </a>
                                    <a href="@Url.Action("Create")" class="btn btn-primary btn-sm">
                                        <i class="fas fa-plus me-1"></i>เพิ่มหมวดหมู่ใหม่
                                    </a>
                                </div>
                            }
                            else
                            {
                                <p class="mb-3">ยังไม่มีหมวดหมู่ในระบบ</p>
                                <a href="@Url.Action("Create")" class="btn btn-primary">
                                    <i class="fas fa-plus me-2"></i>เพิ่มหมวดหมู่แรก
                                </a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Bulk Actions Bar (Hidden by default) -->
<div id="bulkActionsBar" class="alert alert-info d-none mt-3">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <strong id="selectedCount">0</strong> รายการที่เลือก
        </div>
        <div class="btn-group btn-group-sm">
            <button type="button" class="btn btn-success" onclick="bulkToggleStatus(true)">
                <i class="fas fa-eye me-1"></i>เปิดใช้งาน
            </button>
            <button type="button" class="btn btn-secondary" onclick="bulkToggleStatus(false)">
                <i class="fas fa-eye-slash me-1"></i>ปิดใช้งาน
            </button>
            <button type="button" class="btn btn-danger" onclick="bulkDelete()">
                <i class="fas fa-trash me-1"></i>ลบที่เลือก
            </button>
            <button type="button" class="btn btn-outline-secondary" onclick="clearSelection()">
                <i class="fas fa-times me-1"></i>ยกเลิก
            </button>
        </div>
    </div>
</div>

<!-- Add CSRF Token for AJAX requests -->
@Html.AntiForgeryToken()

<!-- Pagination Info -->
@if (Model.Categories.TotalCount > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="admin-text-muted">
            แสดง @((Model.CurrentPage - 1) * Model.PageSize + 1) - @(Math.Min(Model.CurrentPage * Model.PageSize, Model.Categories.TotalCount)) 
            จาก @Model.Categories.TotalCount รายการ
        </div>
        @if (Model.Categories.TotalPages > 1)
        {
            <div>
                <small class="admin-text-muted">
                    หน้า @Model.CurrentPage จาก @Model.Categories.TotalPages
                </small>
            </div>
        }
    </div>
}

<!-- Custom Styles -->
<style>
    .category-row {
        transition: background-color 0.2s ease;
    }
    
    .category-row:hover {
        background-color: var(--admin-bg-tertiary) !important;
    }
    
    .category-color-indicator {
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        flex-shrink: 0;
    }
    
    .color-preview {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        flex-shrink: 0;
    }
    
    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .badge {
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .admin-table th {
        background: var(--admin-bg-tertiary);
        border-bottom: 2px solid var(--admin-border);
        font-weight: 600;
        font-size: 0.875rem;
        position: sticky;
        top: 0;
        z-index: 10;
    }
    
    .admin-table th a {
        color: var(--admin-text-primary);
        font-weight: inherit;
    }
    
    .admin-table th a:hover {
        color: var(--admin-accent-primary);
    }
    
    .admin-table td {
        vertical-align: middle;
        border-bottom: 1px solid var(--admin-border);
        font-size: 0.875rem;
    }
    
    .sortable-active .category-row {
        cursor: move;
    }
    
    .sortable-active .category-row:hover {
        background-color: var(--admin-accent-primary) !important;
        color: white;
    }
    
    .sortable-active .category-row:hover .admin-text-primary,
    .sortable-active .category-row:hover .admin-text-secondary,
    .sortable-active .category-row:hover .admin-text-muted {
        color: white !important;
    }
    
    /* Empty state styling */
    .table tbody td {
        border-color: var(--admin-border);
    }
    
    /* Loading state */
    .table-loading {
        opacity: 0.6;
        pointer-events: none;
    }
    
    /* Bulk actions bar */
    #bulkActionsBar {
        border: 1px solid var(--admin-accent-info);
        background: rgba(6, 182, 212, 0.1);
        border-radius: 0.5rem;
    }
    
    /* Selection highlight */
    .category-row.selected {
        background-color: rgba(59, 130, 246, 0.1) !important;
        border-left: 3px solid var(--admin-accent-primary);
    }
</style>

<!-- JavaScript for table functionality -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize checkbox functionality
        initializeCheckboxes();
        
        // Initialize tooltips if Bootstrap is available
        if (typeof bootstrap !== 'undefined') {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }
    });

    function initializeCheckboxes() {
        const selectAll = document.getElementById('selectAll');
        const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
        
        // Select all functionality
        if (selectAll) {
            selectAll.addEventListener('change', function() {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                    toggleRowSelection(checkbox);
                });
                updateBulkActionsBar();
            });
        }
        
        // Individual checkbox functionality
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                toggleRowSelection(this);
                updateSelectAllState();
                updateBulkActionsBar();
            });
        });
    }
    
    function toggleRowSelection(checkbox) {
        const row = checkbox.closest('tr');
        if (checkbox.checked) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    }
    
    function updateSelectAllState() {
        const selectAll = document.getElementById('selectAll');
        const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
        const checkedBoxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
        
        if (selectAll) {
            if (checkedBoxes.length === 0) {
                selectAll.indeterminate = false;
                selectAll.checked = false;
            } else if (checkedBoxes.length === checkboxes.length) {
                selectAll.indeterminate = false;
                selectAll.checked = true;
            } else {
                selectAll.indeterminate = true;
            }
        }
    }
    
    function updateBulkActionsBar() {
        const checkedBoxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
        const bulkBar = document.getElementById('bulkActionsBar');
        const selectedCount = document.getElementById('selectedCount');
        
        if (checkedBoxes.length > 0) {
            bulkBar.classList.remove('d-none');
            selectedCount.textContent = checkedBoxes.length;
        } else {
            bulkBar.classList.add('d-none');
        }
    }
    
    function clearSelection() {
        const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
        const selectAll = document.getElementById('selectAll');
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
            toggleRowSelection(checkbox);
        });
        
        if (selectAll) {
            selectAll.checked = false;
            selectAll.indeterminate = false;
        }
        
        updateBulkActionsBar();
    }
    
    function bulkToggleStatus(status) {
        const checkedBoxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
        
        if (checkedBoxes.length === 0) {
            if (window.adminNotyf) {
                window.adminNotyf.error('กรุณาเลือกหมวดหมู่ที่ต้องการเปลี่ยนสถานะ');
            }
            return;
        }
        
        const statusText = status ? 'เปิดใช้งาน' : 'ปิดใช้งาน';
        
        if (confirm(`ต้องการ${statusText}หมวดหมู่ ${checkedBoxes.length} รายการที่เลือกหรือไม่?`)) {
            checkedBoxes.forEach(checkbox => {
                const categoryId = parseInt(checkbox.value);
                toggleCategoryStatus(categoryId, !status);
            });
            
            // Clear selection after action
            setTimeout(() => {
                clearSelection();
            }, 1000);
        }
    }
    
    function bulkDelete() {
        const checkedBoxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
        
        if (checkedBoxes.length === 0) {
            if (window.adminNotyf) {
                window.adminNotyf.error('กรุณาเลือกหมวดหมู่ที่ต้องการลบ');
            }
            return;
        }
        
        // Check if any selected categories have posts
        let hasPostsCount = 0;
        checkedBoxes.forEach(checkbox => {
            const row = checkbox.closest('tr');
            const postsBadge = row.querySelector('.badge.bg-info');
            if (postsBadge) {
                hasPostsCount++;
            }
        });
        
        if (hasPostsCount > 0) {
            if (window.adminNotyf) {
                window.adminNotyf.error(`ไม่สามารถลบได้ เนื่องจากมี ${hasPostsCount} หมวดหมู่ที่มีบทความอยู่`);
            }
            return;
        }
        
        if (confirm(`ต้องการลบหมวดหมู่ ${checkedBoxes.length} รายการที่เลือกหรือไม่?\n\nการดำเนินการนี้ไม่สามารถยกเลิกได้`)) {
            // Implement bulk delete functionality
            if (window.adminNotyf) {
                window.adminNotyf.open({
                    type: 'info',
                    message: 'ฟีเจอร์การลบหลายรายการจะพร้อมใช้งานในเร็วๆ นี้'
                });
            }
        }
    }

    function showCategoryPosts(categoryId, categoryName) {
        // This would typically navigate to posts filtered by category
        // For now, show a notification
        if (window.adminNotyf) {
            window.adminNotyf.open({
                type: 'info',
                message: `แสดงบทความในหมวดหมู่ "${categoryName}"\n(ฟีเจอร์นี้จะพร้อมใช้งานเมื่อระบบจัดการบทความเสร็จสมบูรณ์)`
            });
        }
    }

    function toggleSelectAll() {
        const selectAll = document.getElementById('selectAll');
        const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll.checked;
            toggleRowSelection(checkbox);
        });
        
        updateBulkActionsBar();
    }
</script>