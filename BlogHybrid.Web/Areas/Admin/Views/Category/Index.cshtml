@model BlogHybrid.Web.Models.ViewModels.Admin.CategoryIndexViewModel
@{
    ViewData["Title"] = "จัดการหมวดหมู่";
    Layout = "_AdminLayout";
}

<div class="admin-page-header">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1 admin-text-primary">
                <i class="fas fa-folder me-2"></i>
                จัดการหมวดหมู่
            </h1>
            <p class="admin-text-secondary mb-0">
                จัดการหมวดหมู่บทความทั้งหมด (@Model.Categories.TotalCount รายการ)
            </p>
        </div>
        <div>
            <a href="@Url.Action("Create")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>เพิ่มหมวดหมู่ใหม่
            </a>
        </div>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="admin-card mb-4">
    <div class="admin-card-body">
        <form method="get" class="row g-3" id="searchForm">
            <div class="col-md-4">
                <label class="form-label">ค้นหา</label>
                <input type="text" name="search" value="@Model.SearchTerm" 
                       class="form-control" placeholder="ชื่อหมวดหมู่หรือคำอธิบาย">
            </div>
            <div class="col-md-3">
                <label class="form-label">สถานะ</label>
                <select name="isActive" class="form-select">
                    <option value="">ทั้งหมด</option>
                    <option value="true" selected="@(Model.IsActiveFilter == true)">เปิดใช้งาน</option>
                    <option value="false" selected="@(Model.IsActiveFilter == false)">ปิดใช้งาน</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">จำนวน/หน้า</label>
                <select name="pageSize" class="form-select">
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    <option value="50" selected="@(Model.PageSize == 50)">50</option>
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search me-1"></i>ค้นหา
                </button>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-undo me-1"></i>รีเซ็ต
                </a>
            </div>
            
            <!-- Hidden fields to maintain sorting -->
            <input type="hidden" name="sortBy" value="@Model.SortBy">
            <input type="hidden" name="sortDirection" value="@Model.SortDirection">
        </form>
    </div>
</div>

<!-- Categories Table -->
<div class="admin-card">
    <div class="admin-card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">รายการหมวดหมู่</h5>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary btn-sm" onclick="toggleReorderMode()">
                    <i class="fas fa-sort me-1"></i>เรียงลำดับ
                </button>
                <button class="btn btn-outline-success btn-sm" onclick="bulkToggleStatus(true)">
                    <i class="fas fa-eye me-1"></i>เปิดใช้งาน
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="bulkToggleStatus(false)">
                    <i class="fas fa-eye-slash me-1"></i>ปิดใช้งาน
                </button>
            </div>
        </div>
    </div>
    
    <div id="categoryTableContainer">
        @await Html.PartialAsync("_CategoryTable", Model)
    </div>
</div>

<!-- Pagination -->
@if (Model.Categories.TotalPages > 1)
{
    <nav aria-label="Category pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            <li class="page-item @(!Model.HasPrevPage ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { 
                    page = Model.CurrentPage - 1, 
                    pageSize = Model.PageSize, 
                    search = Model.SearchTerm, 
                    isActive = Model.IsActiveFilter,
                    sortBy = Model.SortBy,
                    sortDirection = Model.SortDirection 
                })">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            
            @{
                int startPage = Math.Max(1, Model.CurrentPage - 2);
                int endPage = Math.Min(Model.Categories.TotalPages, Model.CurrentPage + 2);
            }
            
            @if (startPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = 1, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">1</a>
                </li>
                @if (startPage > 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }
            
            @for (int i = startPage; i <= endPage; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = i, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">@i</a>
                </li>
            }
            
            @if (endPage < Model.Categories.TotalPages)
            {
                @if (endPage < Model.Categories.TotalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = Model.Categories.TotalPages, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">@Model.Categories.TotalPages</a>
                </li>
            }
            
            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { 
                    page = Model.CurrentPage + 1, 
                    pageSize = Model.PageSize, 
                    search = Model.SearchTerm, 
                    isActive = Model.IsActiveFilter,
                    sortBy = Model.SortBy,
                    sortDirection = Model.SortDirection 
                })">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        </ul>
    </nav>
}

@section Scripts {
    <script>
        let isReorderMode = false;
        let selectedCategories = [];

        // Auto-submit search form when filters change
        document.addEventListener('DOMContentLoaded', function() {
            const searchForm = document.getElementById('searchForm');
            const selects = searchForm.querySelectorAll('select');
            
            selects.forEach(select => {
                select.addEventListener('change', function() {
                    searchForm.submit();
                });
            });

            // Initialize sortable if in reorder mode
            initializeSortable();
        });

        function toggleReorderMode() {
            isReorderMode = !isReorderMode;
            const table = document.querySelector('#categoryTable tbody');
            
            if (isReorderMode) {
                table.classList.add('sortable-active');
                if (window.adminNotyf) {
                    window.adminNotyf.open({
                        type: 'info',
                        message: 'โหมดเรียงลำดับ: ลากและวางเพื่อเปลี่ยนลำดับ'
                    });
                }
            } else {
                table.classList.remove('sortable-active');
                // Save new order
                saveNewOrder();
            }
        }

        function initializeSortable() {
            // Initialize drag and drop functionality
            // This would use a library like Sortable.js in a real implementation
            console.log('Sortable initialized');
        }

        function saveNewOrder() {
            const rows = document.querySelectorAll('#categoryTable tbody tr[data-category-id]');
            const orderData = [];
            
            rows.forEach((row, index) => {
                const categoryId = row.getAttribute('data-category-id');
                if (categoryId) {
                    orderData.push({
                        id: parseInt(categoryId),
                        order: index + 1
                    });
                }
            });

            if (orderData.length === 0) return;

            fetch('@Url.Action("Reorder")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(orderData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (window.adminNotyf) {
                        window.adminNotyf.success(data.message);
                    }
                } else {
                    if (window.adminNotyf) {
                        window.adminNotyf.error(data.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                if (window.adminNotyf) {
                    window.adminNotyf.error('เกิดข้อผิดพลาดในการบันทึกลำดับ');
                }
            });
        }

        function toggleCategoryStatus(categoryId, currentStatus) {
            const newStatus = !currentStatus;
            
            fetch('@Url.Action("ToggleStatus")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    id: categoryId,
                    isActive: newStatus
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update UI
                    const statusBadge = document.querySelector(`#status-${categoryId}`);
                    const toggleBtn = document.querySelector(`#toggle-${categoryId}`);
                    
                    if (data.newStatus) {
                        statusBadge.className = 'badge bg-success';
                        statusBadge.textContent = 'เปิดใช้งาน';
                        toggleBtn.className = 'btn btn-outline-secondary btn-sm';
                        toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
                        toggleBtn.title = 'ปิดใช้งาน';
                    } else {
                        statusBadge.className = 'badge bg-secondary';
                        statusBadge.textContent = 'ปิดใช้งาน';
                        toggleBtn.className = 'btn btn-outline-success btn-sm';
                        toggleBtn.innerHTML = '<i class="fas fa-eye"></i>';
                        toggleBtn.title = 'เปิดใช้งาน';
                    }
                    
                    if (window.adminNotyf) {
                        window.adminNotyf.success(data.message);
                    }
                } else {
                    if (window.adminNotyf) {
                        window.adminNotyf.error(data.message || 'เกิดข้อผิดพลาด');
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                if (window.adminNotyf) {
                    window.adminNotyf.error('เกิดข้อผิดพลาดในการเปลี่ยนสถานะ');
                }
            });
        }

        function confirmDelete(categoryId, categoryName, postCount) {
            if (postCount > 0) {
                if (window.adminNotyf) {
                    window.adminNotyf.error(`ไม่สามารถลบได้ เนื่องจากมีบทความ ${postCount} รายการ`);
                }
                return;
            }

            if (confirm(`ต้องการลบหมวดหมู่ "${categoryName}" หรือไม่?\n\nการดำเนินการนี้ไม่สามารถยกเลิกได้`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("Delete")/' + categoryId;
                
                const token = document.createElement('input');
                token.type = 'hidden';
                token.name = '__RequestVerificationToken';
                token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                form.appendChild(token);
                document.body.appendChild(form);
                form.submit();
            }
        }

        function bulkToggleStatus(status) {
            const checkboxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
            
            if (checkboxes.length === 0) {
                if (window.adminNotyf) {
                    window.adminNotyf.error('กรุณาเลือกหมวดหมู่ที่ต้องการเปลี่ยนสถานะ');
                }
                return;
            }

            const statusText = status ? 'เปิดใช้งาน' : 'ปิดใช้งาน';
            
            if (confirm(`ต้องการ${statusText}หมวดหมู่ ${checkboxes.length} รายการที่เลือกหรือไม่?`)) {
                checkboxes.forEach(checkbox => {
                    toggleCategoryStatus(parseInt(checkbox.value), !status);
                });
            }
        }

        // Select all functionality
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
            
            if (selectAll && checkboxes.length > 0) {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = selectAll.checked;
                });
            }
        }
    </script>
}