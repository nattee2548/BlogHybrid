@model BlogHybrid.Web.Models.ViewModels.Admin.CategoryIndexViewModel
@{
    ViewData["Title"] = "จัดการหมวดหมู่";
    Layout = "_AdminLayout";
}

<div class="admin-page-header">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1 admin-text-primary">
                <i class="fas fa-folder me-2"></i>
                จัดการหมวดหมู่
            </h1>
            <p class="admin-text-secondary mb-0">
                จัดการหมวดหมู่บทความทั้งหมด (@Model.Categories.TotalCount รายการ)
            </p>
        </div>
        <div>
            <a href="@Url.Action("Create")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>เพิ่มหมวดหมู่ใหม่
            </a>
        </div>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="admin-card mb-4">
    <div class="admin-card-body">
        <form method="get" class="row g-3" id="searchForm">
            <div class="col-md-4">
                <label class="form-label">ค้นหา</label>
                <input type="text" name="search" value="@Model.SearchTerm" 
                       class="form-control" placeholder="ชื่อหมวดหมู่หรือคำอธิบาย">
            </div>
            <div class="col-md-3">
                <label class="form-label">สถานะ</label>
                <select name="isActive" class="form-select">
                    <option value="">ทั้งหมด</option>
                    <option value="true" selected="@(Model.IsActiveFilter == true)">เปิดใช้งาน</option>
                    <option value="false" selected="@(Model.IsActiveFilter == false)">ปิดใช้งาน</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">จำนวน/หน้า</label>
                <select name="pageSize" class="form-select">
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    <option value="50" selected="@(Model.PageSize == 50)">50</option>
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search me-1"></i>ค้นหา
                </button>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-undo me-1"></i>รีเซ็ต
                </a>
            </div>
            
            <!-- Hidden fields to maintain sorting -->
            <input type="hidden" name="sortBy" value="@Model.SortBy">
            <input type="hidden" name="sortDirection" value="@Model.SortDirection">
        </form>
    </div>
</div>

<!-- Categories Table -->
<div class="admin-card">
    <div class="admin-card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">รายการหมวดหมู่</h5>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary btn-sm" onclick="toggleReorderMode()">
                    <i class="fas fa-sort me-1"></i>เรียงลำดับ
                </button>
                <button class="btn btn-outline-success btn-sm" onclick="bulkToggleStatus(true)">
                    <i class="fas fa-eye me-1"></i>เปิดใช้งาน
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="bulkToggleStatus(false)">
                    <i class="fas fa-eye-slash me-1"></i>ปิดใช้งาน
                </button>
            </div>
        </div>
    </div>
    
    <div id="categoryTableContainer">
        @await Html.PartialAsync("_CategoryTable", Model)
    </div>
</div>

<!-- Pagination -->
@if (Model.Categories.TotalPages > 1)
{
    <nav aria-label="Category pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            <li class="page-item @(!Model.HasPrevPage ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { 
                    page = Model.CurrentPage - 1, 
                    pageSize = Model.PageSize, 
                    search = Model.SearchTerm, 
                    isActive = Model.IsActiveFilter,
                    sortBy = Model.SortBy,
                    sortDirection = Model.SortDirection 
                })">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            
            @{
                int startPage = Math.Max(1, Model.CurrentPage - 2);
                int endPage = Math.Min(Model.Categories.TotalPages, Model.CurrentPage + 2);
            }
            
            @if (startPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = 1, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">1</a>
                </li>
                @if (startPage > 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }
            
            @for (int i = startPage; i <= endPage; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = i, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">@i</a>
                </li>
            }
            
            @if (endPage < Model.Categories.TotalPages)
            {
                @if (endPage < Model.Categories.TotalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        page = Model.Categories.TotalPages, 
                        pageSize = Model.PageSize, 
                        search = Model.SearchTerm, 
                        isActive = Model.IsActiveFilter,
                        sortBy = Model.SortBy,
                        sortDirection = Model.SortDirection 
                    })">@Model.Categories.TotalPages</a>
                </li>
            }
            
            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { 
                    page = Model.CurrentPage + 1, 
                    pageSize = Model.PageSize, 
                    search = Model.SearchTerm, 
                    isActive = Model.IsActiveFilter,
                    sortBy = Model.SortBy,
                    sortDirection = Model.SortDirection 
                })">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        </ul>
    </nav>
}

@section Scripts {
    <script src="~/js/admin/CategoryDeleteConfirm.js" asp-append-version="true"></script>
    <script>
        let isReorderMode = false;
        let selectedCategories = [];

        // Auto-submit search form when filters change
        document.addEventListener('DOMContentLoaded', function() {
            const searchForm = document.getElementById('searchForm');
            const selects = searchForm.querySelectorAll('select');
            
            selects.forEach(select => {
                select.addEventListener('change', function() {
                    searchForm.submit();
                });
            });

            // Initialize sortable if in reorder mode
            initializeSortable();
        });

        function toggleReorderMode() {
            isReorderMode = !isReorderMode;
            const table = document.querySelector('#categoryTable tbody');
            
            if (isReorderMode) {
                table.classList.add('sortable-active');
                if (window.adminNotyf) {
                    window.adminNotyf.open({
                        type: 'info',
                        message: 'โหมดเรียงลำดับ: ลากและวางเพื่อเปลี่ยนลำดับ'
                    });
                }
            } else {
                table.classList.remove('sortable-active');
                // Save new order
                saveNewOrder();
            }
        }

        function initializeSortable() {
            // Initialize drag and drop functionality
            // This would use a library like Sortable.js in a real implementation
            console.log('Sortable initialized');
        }

        function saveNewOrder() {
            const rows = document.querySelectorAll('#categoryTable tbody tr[data-category-id]');
            const orderData = [];
            
            rows.forEach((row, index) => {
                const categoryId = row.getAttribute('data-category-id');
                if (categoryId) {
                    orderData.push({
                        id: parseInt(categoryId),
                        order: index + 1
                    });
                }
            });

            if (orderData.length === 0) return;

            fetch('@Url.Action("Reorder")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(orderData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (window.adminNotyf) {
                        window.adminNotyf.success(data.message);
                    }
                } else {
                    if (window.adminNotyf) {
                        window.adminNotyf.error(data.message);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                if (window.adminNotyf) {
                    window.adminNotyf.error('เกิดข้อผิดพลาดในการบันทึกลำดับ');
                }
            });
        }

        function toggleCategoryStatus(categoryId, currentStatus) {
    const newStatus = !currentStatus;
    
    fetch('@Url.Action("ToggleStatus")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: JSON.stringify({
            id: categoryId,
            isActive: newStatus
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update UI
            const statusBadge = document.querySelector(`#status-${categoryId}`);
            const toggleBtn = document.querySelector(`#toggle-${categoryId}`);
            
            if (data.newStatus) {
                // เปิดใช้งาน
                statusBadge.className = 'badge bg-success';
                statusBadge.textContent = 'เปิดใช้งาน';
                toggleBtn.className = 'btn btn-outline-secondary btn-sm';
                toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>'; // แสดงไอคอนปิดตา
                toggleBtn.title = 'ปิดใช้งาน';
            } else {
                // ปิดใช้งาน
                statusBadge.className = 'badge bg-secondary';
                statusBadge.textContent = 'ปิดใช้งาน';
                toggleBtn.className = 'btn btn-outline-success btn-sm';
                toggleBtn.innerHTML = '<i class="fas fa-eye"></i>'; // แสดงไอคอนเปิดตา
                toggleBtn.title = 'เปิดใช้งาน';
            }
            
            // อัพเดท onclick attribute ด้วย
            toggleBtn.setAttribute('onclick', `toggleCategoryStatus(${categoryId}, ${data.newStatus})`);
            
            if (window.adminNotyf) {
                window.adminNotyf.success(data.message);
            }
        } else {
            if (window.adminNotyf) {
                window.adminNotyf.error(data.message || 'เกิดข้อผิดพลาด');
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        if (window.adminNotyf) {
            window.adminNotyf.error('เกิดข้อผิดพลาดในการเปลี่ยนสถานะ');
        }
    });
}

       function bulkToggleStatus(status) {
    const checkboxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
    
    if (checkboxes.length === 0) {
        if (window.adminNotyf) {
            window.adminNotyf.error('กรุณาเลือกหมวดหมู่ที่ต้องการเปลี่ยนสถานะ');
        }
        return;
    }

    const statusText = status ? 'เปิดใช้งาน' : 'ปิดใช้งาน';
    
    // ใช้ modal สวย ๆ แทน confirm() ธรรมดา
    if (categoryDeleteConfirm) {
        showBulkStatusChangeModal(checkboxes.length, statusText, status);
    } else {
        // fallback
        if (confirm(`ต้องการ${statusText}หมวดหมู่ ${checkboxes.length} รายการที่เลือกหรือไม่?`)) {
            performBulkStatusChange(status);
        }
    }
}

function performBulkStatusChange(newStatus) {
    const checkboxes = document.querySelectorAll('input[name="selectedCategories"]:checked');
    
    checkboxes.forEach(checkbox => {
        const categoryId = parseInt(checkbox.value);
        // แก้ไขตรงนี้: ส่งค่า currentStatus ที่ต้องการเปลี่ยนเป็น newStatus
        const currentStatus = !newStatus; // ถ้าต้องการเปลี่ยนเป็น true ค่าปัจจุบันต้องเป็น false
        toggleCategoryStatus(categoryId, currentStatus);
    });

    // Clear selection หลังจากเสร็จ
    setTimeout(() => {
        const selectAll = document.getElementById('selectAll');
        const allCheckboxes = document.querySelectorAll('input[name="selectedCategories"]');
        
        allCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
            const row = checkbox.closest('tr');
            row.classList.remove('selected');
        });
        
        if (selectAll) {
            selectAll.checked = false;
            selectAll.indeterminate = false;
        }
        
        // ซ่อน bulk actions bar
        const bulkBar = document.getElementById('bulkActionsBar');
        if (bulkBar) bulkBar.classList.add('d-none');
    }, 1000);
}

function showBulkStatusChangeModal(count, statusText, newStatus) {
    const overlay = document.createElement('div');
    overlay.id = 'bulkStatusConfirmationOverlay';
    overlay.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;
        align-items: center; z-index: 9999; backdrop-filter: blur(4px);
        animation: fadeIn 0.3s ease-out;
    `;

    const modal = document.createElement('div');
    modal.style.cssText = `
        background: white; border-radius: 12px; padding: 2rem; max-width: 450px;
        width: 90%; text-align: center; box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: slideIn 0.3s ease-out; position: relative;
    `;

    const iconColor = newStatus ? '#059669' : '#6b7280';
    const icon = newStatus ? 'fa-eye' : 'fa-eye-slash';

    modal.innerHTML = `
        <div style="margin-bottom: 1.5rem;">
            <div style="width: 80px; height: 80px; margin: 0 auto 1rem;
                background: linear-gradient(135deg, ${iconColor}, ${iconColor}dd); border-radius: 50%;
                display: flex; align-items: center; justify-content: center;
                color: white; font-size: 2.5rem; animation: pulse 2s infinite;">
                <i class="fas ${icon}"></i>
            </div>
            <h3 style="color: #1f2937; font-weight: 600; margin-bottom: 0.5rem; font-size: 1.25rem;">
                ยืนยันการ${statusText}
            </h3>
            <p style="color: #6b7280; margin: 0 0 1rem; font-size: 0.95rem; line-height: 1.5;">
                คุณแน่ใจหรือไม่ที่ต้องการ${statusText}หมวดหมู่ทั้งหมด <strong>${count}</strong> รายการ?
            </p>
        </div>
        
        <div style="display: flex; gap: 0.75rem; justify-content: center; flex-wrap: wrap;">
            <button id="confirmBulkStatusBtn" style="background: linear-gradient(135deg, ${iconColor}, ${iconColor}dd);
                color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px;
                cursor: pointer; font-weight: 600; font-size: 0.95rem; transition: all 0.2s ease;
                min-width: 120px; box-shadow: 0 4px 12px rgba(${newStatus ? '5, 150, 105' : '107, 114, 128'}, 0.3);">
                <i class="fas ${icon} me-2"></i>${statusText}
            </button>
            
            <button id="cancelBulkStatusBtn" style="background: #f3f4f6; color: #374151;
                border: 1px solid #d1d5db; padding: 0.75rem 1.5rem; border-radius: 8px;
                cursor: pointer; font-weight: 600; font-size: 0.95rem; transition: all 0.2s ease;
                min-width: 120px;">
                <i class="fas fa-times me-2"></i>ยกเลิก
            </button>
        </div>
    `;

    overlay.appendChild(modal);
    document.body.appendChild(overlay);

    // Setup events
    document.getElementById('confirmBulkStatusBtn').addEventListener('click', () => {
        closeBulkStatusConfirmation(overlay, true, newStatus);
    });

    document.getElementById('cancelBulkStatusBtn').addEventListener('click', () => {
        closeBulkStatusConfirmation(overlay, false, newStatus);
    });

    overlay.addEventListener('click', (e) => {
        if (e.target === overlay) closeBulkStatusConfirmation(overlay, false, newStatus);
    });

    // Add CSS styles if not exists
    if (!document.getElementById('bulkStatusModalStyles')) {
        const style = document.createElement('style');
        style.id = 'bulkStatusModalStyles';
        style.textContent = `
            @@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
            @@keyframes slideIn { from { opacity: 0; transform: scale(0.8) translateY(-20px); } 
                                to { opacity: 1; transform: scale(1) translateY(0); } }
            @@keyframes pulse {
                0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4); }
                70% { box-shadow: 0 0 0 20px rgba(59, 130, 246, 0); }
                100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
            }
        `;
        document.head.appendChild(style);
    }
}

function closeBulkStatusConfirmation(overlay, confirmed, newStatus) {
    const modal = overlay.querySelector('div');
    modal.style.animation = 'slideOut 0.2s ease-in';

    setTimeout(() => {
        document.body.removeChild(overlay);
        
        if (confirmed) {
            performBulkStatusChange(newStatus);
        }
    }, 200);
}

        // Select all functionality
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('input[name="selectedCategories"]');
            
            if (selectAll && checkboxes.length > 0) {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = selectAll.checked;
                });
            }
        }
    </script>
}